# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZoNneaUdm2vovSqeTUmCsB5GUvrhplqd
"""

# 1. Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

import joblib

# For interactive widgets
from ipywidgets import interact, FloatSlider
import ipywidgets as widgets

# 2. Load the dataset
california = fetch_california_housing()
X = pd.DataFrame(california.data, columns=california.feature_names)
y = california.target

# Display the first five rows
print("First five rows of the dataset:")
display(X.head())

# 3. Exploratory Data Analysis
print("\nBasic Statistics:")
display(X.describe())

# Correlation Heatmap
data = X.copy()
data['MedHouseVal'] = y

corr_matrix = data.corr()

plt.figure(figsize=(10,8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Pairplot
sns.pairplot(data[['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'MedHouseVal']])
plt.show()

# 4. Data Preprocessing
# Check for missing values
print("\nMissing values in each feature:")
print(X.isnull().sum())

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining set size: {X_train.shape}")
print(f"Testing set size: {X_test.shape}")

# 5. Model Training
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
print("\nModel training complete.")

# 6. Model Evaluation
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"\nMean Squared Error (MSE): {mse:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
print(f"R-squared (R²): {r2:.4f}")

# Feature Importance
importances = model.feature_importances_
feature_names = X.columns

feat_importances = pd.Series(importances, index=feature_names)
feat_importances = feat_importances.sort_values(ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x=feat_importances, y=feat_importances.index)
plt.title('Feature Importances')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.show()

# 7. Interactive Prediction Interface
def predict_house_price(MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude):
    # Create a feature array
    features = np.array([[MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude]])

    # Predict using the trained model
    prediction = model.predict(features)[0]

    # Scale the prediction back to original scale
    predicted_price = prediction * 100000  # As per dataset's scaling

    return f"Estimated House Price: ${predicted_price:,.2f}"

# Create sliders for each feature
MedInc_slider = FloatSlider(min=0, max=15, step=0.1, value=8, description='MedInc:')
HouseAge_slider = FloatSlider(min=1, max=100, step=1, value=30, description='HouseAge:')
AveRooms_slider = FloatSlider(min=1, max=20, step=0.1, value=5, description='AveRooms:')
AveBedrms_slider = FloatSlider(min=0.5, max=10, step=0.1, value=1, description='AveBedrms:')
Population_slider = FloatSlider(min=3, max=35000, step=100, value=1000, description='Population:')
AveOccup_slider = FloatSlider(min=1, max=10, step=0.1, value=3, description='AveOccup:')
Latitude_slider = FloatSlider(min=32, max=42, step=0.1, value=37, description='Latitude:')
Longitude_slider = FloatSlider(min=-124, max=-114, step=0.1, value=-120, description='Longitude:')

# Display interactive widgets
interact(predict_house_price,
         MedInc=MedInc_slider,
         HouseAge=HouseAge_slider,
         AveRooms=AveRooms_slider,
         AveBedrms=AveBedrms_slider,
         Population=Population_slider,
         AveOccup=AveOccup_slider,
         Latitude=Latitude_slider,
         Longitude=Longitude_slider);


from sklearn.model_selection import GridSearchCV

# Define parameter grid
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=model,
                           param_grid=param_grid,
                           cv=3,
                           n_jobs=-1,
                           scoring='neg_mean_squared_error',
                           verbose=2)

# Fit GridSearchCV
grid_search.fit(X_train, y_train)

print(f"Best parameters: {grid_search.best_params_}")
print(f"Best CV MSE: {-grid_search.best_score_:.4f}")

# Update model with best parameters
best_model = grid_search.best_estimator_

# Evaluate the best model
y_pred_best = best_model.predict(X_test)
mse_best = mean_squared_error(y_test, y_pred_best)
rmse_best = np.sqrt(mse_best)
r2_best = r2_score(y_test, y_pred_best)

print(f"\nBest Model - MSE: {mse_best:.4f}, RMSE: {rmse_best:.4f}, R²: {r2_best:.4f}")

from sklearn.model_selection import cross_val_score

# Perform 5-fold cross-validation
cv_scores = cross_val_score(best_model, X, y, cv=5, scoring='neg_mean_squared_error')

# Convert to positive MSE
cv_mse = -cv_scores

print(f"\nCross-Validation MSE scores: {cv_mse}")
print(f"Average CV MSE: {cv_mse.mean():.4f}")
print(f"Standard Deviation: {cv_mse.std():.4f}")

# Actual vs Predicted Prices
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred_best, alpha=0.5)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted House Prices')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()

# Residual Plot
residuals = y_test - y_pred_best
plt.figure(figsize=(8,6))
sns.histplot(residuals, kde=True)
plt.xlabel('Residuals')
plt.title('Residuals Distribution')
plt.show()